"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require("fs-extra"),
    readFile = _require.readFile,
    pathExists = _require.pathExists,
    ensureDir = _require.ensureDir,
    outputFile = _require.outputFile;

var _require2 = require("url"),
    parse = _require2.parse;

var getUrls = require("get-urls");

var download = require("download");

var filePath = "./.cache/google-fonts/google-fonts.css";
module.exports =
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  var cssData, fontLinks, domains, fontPaths, i, url, _parse, pathname, protocol, hostname, origin, dirPath;

  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return readFile(filePath, "utf8");

        case 2:
          cssData = _context.sent;
          fontLinks = (0, _toConsumableArray2.default)(getUrls(cssData)); // Download font files

          domains = [];
          fontPaths = [];
          i = fontLinks.length;

        case 7:
          if (!i--) {
            _context.next = 26;
            break;
          }

          url = fontLinks[i].split(")")[0];
          _parse = parse(url), pathname = _parse.pathname, protocol = _parse.protocol, hostname = _parse.hostname;
          origin = "".concat(protocol, "//").concat(hostname);

          if (domains.indexOf(origin) === -1) {
            domains.push(origin);
          }

          if (fontPaths.indexOf(pathname) === -1) {
            fontPaths.push(pathname);
          }

          _context.next = 15;
          return pathExists("./.cache/google-fonts/fonts".concat(pathname));

        case 15:
          if (_context.sent) {
            _context.next = 24;
            break;
          }

          dirPath = pathname.split("/");
          dirPath.pop();
          dirPath = dirPath.join("/");
          dirPath = "./.cache/google-fonts/fonts".concat(dirPath);
          _context.next = 22;
          return ensureDir(dirPath);

        case 22:
          _context.next = 24;
          return download(url, dirPath);

        case 24:
          _context.next = 7;
          break;

        case 26:
          // Replace domains with relative paths in CSS
          domains.forEach(function (domain) {
            while (cssData.indexOf(domain) !== -1) {
              cssData = cssData.replace(domain, "/google-fonts");
            }
          });
          _context.next = 29;
          return outputFile(filePath, cssData);

        case 29:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));