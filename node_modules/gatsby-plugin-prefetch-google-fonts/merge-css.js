"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require("fs-extra"),
    readFile = _require.readFile,
    outputFile = _require.outputFile;

var CleanCss = require("clean-css");

module.exports =
/*#__PURE__*/
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee() {
  var _ref2, _ref3, woff2, woff, woff2Lines, woffLines, css;

  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Promise.all([readFile("./.cache/google-fonts/woff2.css", "utf8"), readFile("./.cache/google-fonts/woff.css", "utf8")]);

        case 2:
          _ref2 = _context.sent;
          _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
          woff2 = _ref3[0];
          woff = _ref3[1];
          woff2Lines = getLines(woff2);
          woffLines = getLines(woff);
          mergeLines(woff2Lines, woffLines);
          css = createCssString(woff2, woff2Lines);
          css = new CleanCss().minify(css).styles; // Add font-display swap as recommended here https://css-tricks.com/font-display-masses/.

          css = css.replace(/}/g, ';font-display: swap}');
          _context.next = 14;
          return outputFile("./.cache/google-fonts/google-fonts.css", css);

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));

function getLines(data) {
  var lines = {};
  data.split("\n").forEach(function (line) {
    line = line.trim();

    if (line.indexOf("src:") === 0) {
      var items = line.replace(";", "").replace("src:", "").split(",").map(function (item) {
        return item.trim();
      });
      var name = items.shift();
      lines[name] = {
        items: items,
        line: line.replace(";", "")
      };
    }
  });
  return lines;
}

function mergeLines(origin, newLines) {
  for (var i in origin) {
    if (newLines[i]) {
      origin[i].newLine = "".concat(origin[i].newLine || origin[i].line, ", ").concat(newLines[i].items[newLines[i].items.length - 1]);
    }
  }
}

function createCssString(str, obj) {
  for (var i in obj) {
    str = str.replace(obj[i].line, obj[i].newLine);
  }

  return str;
}